const express = require('express');
const fs = require('fs');
const path = require('path');
const crypto = require('crypto');
const axios = require('axios');

const app = express();
const PORT = 3000;

app.use(express.json());

// –ü—É—Ç—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è code_verifier –ø–æ state (tg_id)
const pkceFile = path.join(__dirname, 'pkce.json');

function loadPkce() {
  if (!fs.existsSync(pkceFile)) return {};
  const raw = fs.readFileSync(pkceFile, 'utf-8');
  return raw ? JSON.parse(raw) : {};
}

function savePkce(data) {
  fs.writeFileSync(pkceFile, JSON.stringify(data, null, 2));
}

function setPkce(state, verifier) {
  const data = loadPkce();
  data[state] = { verifier, createdAt: Date.now() };
  savePkce(data);
}

function getAndRemovePkce(state) {
  const data = loadPkce();
  if (!data[state]) return null;
  const verifier = data[state].verifier;
  delete data[state];
  savePkce(data);
  return verifier;
}

// –¢–µ—Å—Ç–æ–≤—ã–π —Ä–æ—É—Ç
app.get('/test', (req, res) => res.send('Test OK! üö¶'));

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PKCE –∏ –æ—Ç–¥–∞—á–∞ —Å—Å—ã–ª–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
app.get('/auth/vk/link', (req, res) => {
  const client_id = '53336238';
  const redirect_uri = 'https://api.fokusnikaltair.xyz/auth/vk/callback';
  const tg_id = req.query.tg_id;
  if (!tg_id) return res.status(400).send('–ù–µ –ø–µ—Ä–µ–¥–∞–Ω tg_id');

  // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º code_verifier –∏ code_challenge (PKCE)
  const code_verifier = crypto.randomBytes(64).toString('base64url').slice(0, 128);
  const hash = crypto.createHash('sha256').update(code_verifier).digest();
  const code_challenge = hash.toString('base64').replace(/\+/g, '-').replace(/\//g, '_').replace(/=+$/, '');

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º code_verifier –ø–æ–¥ state = tg_id
  setPkce(tg_id, code_verifier);

  // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è VK –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const authUrl = `https://id.vk.com/oauth/authorize?client_id=${client_id}&redirect_uri=${encodeURIComponent(redirect_uri)}&response_type=code&scope=groups,offline&state=${tg_id}&code_challenge=${code_challenge}&code_challenge_method=S256`;

  res.json({ authUrl });
});

// Callback ‚Äî –æ–±–º–µ–Ω –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω
app.get('/auth/vk/callback', async (req, res) => {
  const { code, state } = req.query;

  if (!code) return res.send('<h2>–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω code</h2>');
  if (!state) return res.send('<h2>–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω state</h2>');

  const client_id = '53336238';
  const redirect_uri = 'https://api.fokusnikaltair.xyz/auth/vk/callback';

  // –ë–µ—Ä—ë–º code_verifier –ø–æ state (tg_id)
  const code_verifier = getAndRemovePkce(state);
  if (!code_verifier) {
    return res.send('<h2>–û—à–∏–±–∫–∞: code_verifier –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç—ë–∫</h2>');
  }

  // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –æ–±–º–µ–Ω–∞ –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω
  const params = new URLSearchParams();
  params.append('client_id', client_id);
  params.append('grant_type', 'authorization_code');
  params.append('code', code);
  params.append('redirect_uri', redirect_uri);
  params.append('code_verifier', code_verifier);

  try {
    const tokenRes = await axios.post('https://id.vk.com/oauth/token', params.toString(), {
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' }
    });

    const data = tokenRes.data;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ users.json
    const usersPath = path.join(__dirname, 'users.json');
    let users = {};
    if (fs.existsSync(usersPath)) {
      const raw = fs.readFileSync(usersPath, 'utf-8');
      users = raw ? JSON.parse(raw) : {};
    }
    users[data.user_id] = {
      vk_user_id: data.user_id,
      access_token: data.access_token,
      refresh_token: data.refresh_token,
      expires_in: data.expires_in,
      tg_id: state,
      saved_at: new Date().toISOString()
    };
    fs.writeFileSync(usersPath, JSON.stringify(users, null, 2));

    res.send('<h2><b>–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!</b> –ú–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ Telegram.</h2>');
    console.log(`üíæ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å VK ID ${data.user_id} —Å–æ—Ö—Ä–∞–Ω—ë–Ω (TG ID: ${state})`);
  } catch (e) {
    console.error('–û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞ –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω:', e.response?.data || e.message);
    res.send(`<h2>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–º–µ–Ω–µ –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω:<br>${JSON.stringify(e.response?.data || e.message)}</h2>`);
  }
});

// –†–∞–∑–¥–∞—á–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
app.use(express.static(path.join(__dirname, 'frontend')));
app.use(express.static(path.join(__dirname, 'public')));

app.listen(PORT, () => {
  console.log(`–°–µ—Ä–≤–µ—Ä VK ID –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});
