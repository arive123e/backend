const express = require('express');
const fs = require('fs');
const path = require('path');
const axios = require('axios');

const app = express();
const PORT = 3000;

app.use(express.json());

app.get('/test', (req, res) => {
  res.send('Test OK! üö¶');
});

// –≠–Ω–¥–ø–æ–∏–Ω—Ç –∫–æ–ª–±—ç–∫–∞ –ø–æ—Å–ª–µ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
app.get('/auth/vk/callback', async (req, res) => {
  // üîÑ NEW: –¥–æ–±–∞–≤–∏–ª device_id
  const { code, state, code_verifier, device_id } = req.query;

  // –õ–æ–≥–∏—Ä—É–µ–º –¥–ª—è –¥–µ–±–∞–≥–∞
  console.log('[VKID CALLBACK] –ó–∞–ø—Ä–æ—Å:', { code, state, code_verifier, device_id });

  if (!code) return res.send('<h2>–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω code</h2>');
  if (!code_verifier) return res.send('<h2>–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω code_verifier</h2>');
  // üîÑ NEW: –ø—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ device_id
  if (!device_id) return res.send('<h2>–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω device_id</h2>');

  const client_id = '53336238';
  const redirect_uri = 'https://api.fokusnikaltair.xyz/auth/vk/callback';

  const params = new URLSearchParams();
  params.append('client_id', client_id);
  params.append('grant_type', 'authorization_code'); // üîÑ NEW: –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω –¥–ª—è VK ID –±–µ–∑ SDK
  params.append('code', code);
  params.append('redirect_uri', redirect_uri);
  params.append('code_verifier', code_verifier);
  params.append('device_id', device_id); // üîÑ NEW: –ø–µ—Ä–µ–¥–∞—ë–º device_id

  try {
    // üîÑ NEW: –∏—Å–ø–æ–ª—å–∑—É–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π endpoint –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏ (–µ—Å–ª–∏ —Ç–≤–æ—è –¥–æ–∫–∞ —Ç—Ä–µ–±—É–µ—Ç /oauth2/auth, –æ—Å—Ç–∞–≤—å —Ç–∞–∫!)
    const vkRes = await axios.post(
      'https://id.vk.com/oauth2/auth',
      params.toString(),
      { headers: { 'Content-Type': 'application/x-www-form-urlencoded' } }
    );

    console.log('[VKID CALLBACK] –û—Ç–≤–µ—Ç VK:', vkRes.data);

    const data = vkRes.data;

    if (data.response) {
      const usersPath = path.join(__dirname, 'users.json');
      let users = {};
      if (fs.existsSync(usersPath)) {
        const raw = fs.readFileSync(usersPath, 'utf-8');
        users = raw ? JSON.parse(raw) : {};
      }
      users[data.response.user_id] = {
        vk_user_id: data.response.user_id,
        access_token: data.response.access_token,
        refresh_token: data.response.refresh_token,
        expires_in: data.response.expires_in,
        tg_id: state || null,
        saved_at: new Date().toISOString()
      };
      fs.writeFileSync(usersPath, JSON.stringify(users, null, 2));

      res.send('<h2><b>–£—Å–ø–µ—à–Ω–æ!</b> –ú–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ Telegram.</h2>');
      console.log(`üíæ VK user_id ${data.response.user_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω (TG: ${state || '-'})`);
    } else {
      res.send('<h2>–û—à–∏–±–∫–∞ –æ—Ç VK:<br>' + JSON.stringify(data.error || data) + '</h2>');
      console.error('[VKID CALLBACK] –û—à–∏–±–∫–∞ –æ—Ç VK:', data.error || data);
    }
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞ –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω:', err.response?.data || err.message);
    res.send('<h2>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–º–µ–Ω–µ –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω VK<br>' + JSON.stringify(err.response?.data || err.message) + '</h2>');
  }
});

app.use(express.static(path.join(__dirname, 'frontend')));
app.use(express.static(path.join(__dirname, 'public')));

app.listen(PORT, () => {
  console.log(`VK ID Auth backend –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});
