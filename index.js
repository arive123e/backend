require('dotenv').config(); // ‚ú® –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–µ–∫—Ä–µ—Ç–∏–∫–∏ –∏–∑ .env ‚Äî —Ç–µ–ø–µ—Ä—å –º–∞–≥–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞!

const express = require('express'); // üßô Express ‚Äî –Ω–∞—à —Å–µ—Ä–≤–µ—Ä–Ω—ã–π –≤–æ–ª—à–µ–±–Ω–∏–∫
const path = require('path'); // üì¶ –î–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—É—Ç—è–º–∏
const fs = require('fs'); // üóÇÔ∏è –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const crypto = require('crypto'); // üîê –î–ª—è PKCE –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
const axios = require('axios'); // üì° –î–ª—è –æ–±–º–µ–Ω–∞ –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω

const app = express();
const PORT = 3000;

// ====================
// üé© PKCE-–º–∞—Å—Ç–µ—Ä—Å–∫–∞—è
// ====================

// –í–æ–ª—à–µ–±–Ω–∞—è –∫–∞—Ä—Ç–∞ "state ‚Üí code_verifier" (—Ç–æ–ª—å–∫–æ –ø–æ–∫–∞ —Å–µ—Ä–≤–µ—Ä –∂–∏–≤)
const pkceStates = new Map();

// ü™Ñ –°–æ–∑–¥–∞—ë–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π code_verifier –¥–ª—è PKCE
function generateCodeVerifier() {
  return crypto.randomBytes(32).toString('base64url');
}

// ‚ú® –ü—Ä–µ–≤—Ä–∞—â–∞–µ–º code_verifier –≤ code_challenge (SHA256 –∏ —Å–ø–µ—Ü. –∫–æ–¥–∏—Ä–æ–≤–∫–∞)
function generateCodeChallenge(verifier) {
  return crypto
    .createHash('sha256')
    .update(verifier)
    .digest('base64url');
}

// =======================
// üíæ –ü–∞–º—è—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
// =======================
const recentIPs = new Map(); // –ó–∞—â–∏—Ç–∞ –æ—Ç –ø–æ–≤—Ç–æ—Ä–æ–≤
let callCounter = 0; // –°—á—ë—Ç—á–∏–∫ –≤—ã–∑–æ–≤–æ–≤ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏

app.use(express.json()); // üåü –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å JSON-–∑–∞–ø—Ä–æ—Å—ã

// ====================
// üß™ –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
// ====================
app.get('/test', (req, res) => {
  res.send('Test OK! üö¶');
});

// ==============================
// üè† –ì–ª–∞–≤–Ω–∞—è ‚Äî –º–∞–≥–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
// ==============================
app.get('/', (req, res) => {
  res.send('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –º–∞–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ–µ–∫—Ç –§–æ–∫—É—Å–Ω–∏–∫–∞ –ê–ª—å—Ç–∞–∏—Ä–∞! ü™Ñ‚ú®');
});

// =============================================
// üîë –°—Ç–∞—Ä—Ç PKCE-–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ VK ID (magic)
// =============================================
app.get('/auth/vk', (req, res) => {
  // 1. –°–æ–∑–¥–∞—ë–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è PKCE
  const code_verifier = generateCodeVerifier();
  const code_challenge = generateCodeChallenge(code_verifier);

  // 2. –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º state (—Å–µ–∫—Ä–µ—Ç–Ω–∞—è –ø–µ—á–∞—Ç—å –∑–∞—â–∏—Ç—ã üõ°Ô∏è)
  const state = crypto.randomBytes(12).toString('hex');

  // 3. –°–æ—Ö—Ä–∞–Ω—è–µ–º state –∏ code_verifier (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ–±–º–µ–Ω–∞ —Ç–æ–∫–µ–Ω–∞)
  pkceStates.set(state, code_verifier);

  // 4. –ì–æ—Ç–æ–≤–∏–º –≤–æ–ª—à–µ–±–Ω—ã–π –ø–æ—Ä—Ç–∞–ª VK ID
  const params = new URLSearchParams({
    response_type: 'code',
    client_id: '53336238', 
    redirect_uri: 'https://api.fokusnikaltair.xyz/auth/vk/callback', 
    scope: 'groups', //  –Ω—É–∂–Ω—ã–µ –ø—Ä–∞–≤–∞!
    state,
    code_challenge,
    code_challenge_method: 'S256'
  });

  // 5. –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ VK ID ‚úàÔ∏è
  const vkAuthUrl = `https://id.vk.com/authorize?${params.toString()}`;
  res.redirect(vkAuthUrl);
});

// ===============================================
// üßô‚Äç‚ôÇÔ∏è Callback VK ID –∏ –æ–±–º–µ–Ω –∫–æ–¥–∞ –Ω–∞ access_token + –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ!
// ===============================================
app.get('/auth/vk/callback', async (req, res) => {
  const { code, state } = req.query;

  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ code –∏ state –ø–æ–ª—É—á–µ–Ω—ã
  if (!code || !state) {
    return res.status(400).send('–û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç code –∏–ª–∏ state! ü•≤');
  }

  // 2. –ù–∞—Ö–æ–¥–∏–º —Ä–∞–Ω–µ–µ —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã–π code_verifier
  const code_verifier = pkceStates.get(state);

  if (!code_verifier) {
    return res.status(400).send('–û—à–∏–±–∫–∞: –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –∏–ª–∏ —É—Å—Ç–∞—Ä–µ–≤—à–∏–π state! ‚è≥');
  }

  // 3. –£–¥–∞–ª—è–µ–º state –∏–∑ –ø–∞–º—è—Ç–∏ (–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å)
  pkceStates.delete(state);

  try {
    // 4. –î–µ–ª–∞–µ–º –º–∞–≥–∏—á–µ—Å–∫–∏–π –æ–±–º–µ–Ω code + code_verifier –Ω–∞ access_token!
    const tokenUrl = 'https://api.vk.com/oauth/token';
    const params = {
      grant_type: 'authorization_code',
      client_id: '53336238',
      redirect_uri: 'https://api.fokusnikaltair.xyz/auth/vk/callback',
      code,
      code_verifier,
      v: '5.199'
    };

    console.log('[VK TOKEN] –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', params);
    console.log('[VK TOKEN] –ö–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è:', new URLSearchParams(params).toString());
    
    // ‚ö° –û—Ç–ø—Ä–∞–≤–ª—è–µ–º POST-–∑–∞–ø—Ä–æ—Å –∫ VK (—Ç–æ–ª—å–∫–æ –∫–∞–∫ application/x-www-form-urlencoded!)
    const tokenRes = await axios.post(tokenUrl, new URLSearchParams(params), {
      headers: { 'Content-Type': 'application/x-www-form-urlencoded' }
    });

    // üéâ –ï—Å–ª–∏ –≤—Å—ë –ø—Ä–æ—à–ª–æ —Ö–æ—Ä–æ—à–æ ‚Äî access_token –ø–æ–ª—É—á–µ–Ω!
    const data = tokenRes.data;

    // üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å—Ä–∞–∑—É –≤ users.json!
    try {
      const usersPath = path.join(__dirname, 'users.json');
      let users = {};

      // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª –µ—Å–ª–∏ –µ—Å—Ç—å
      if (fs.existsSync(usersPath)) {
        const raw = fs.readFileSync(usersPath, 'utf-8');
        users = raw ? JSON.parse(raw) : {};
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ VK user_id
      users[data.user_id] = {
        vk_user_id: data.user_id,
        access_token: data.access_token,
        expires_in: data.expires_in,
        saved_at: new Date().toISOString()
      };

      fs.writeFileSync(usersPath, JSON.stringify(users, null, 2));
      console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—ë–Ω VK user_id ${data.user_id} —Å access_token`);

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—É —É—Å–ø–µ—Ö–∞
      res.send(`
        <h2>–ú–∞–≥–∏—è —Å—Ä–∞–±–æ—Ç–∞–ª–∞! üéâ</h2>
        <p>–í–∞—à VK –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á—ë–Ω!<br>–ú–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –æ–∫–Ω–æ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ Telegram ü™Ñ</p>
        <pre style="font-size:13px">${JSON.stringify({
          user_id: data.user_id,
          expires_in: data.expires_in
        }, null, 2)}</pre>
      `);
    } catch (saveErr) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', saveErr.message);
      res.status(500).send('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–æ–∫–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –§–æ–∫—É—Å–Ω–∏–∫—É –ê–ª—å—Ç–∞–∏—Ä—É! üßô‚Äç‚ôÇÔ∏è');
    }
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞ –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω:', err.response?.data || err.message);
    res.status(500).send('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å access_token. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –§–æ–∫—É—Å–Ω–∏–∫—É –ê–ª—å—Ç–∞–∏—Ä—É! üßô‚Äç‚ôÇÔ∏è');
  }
});

// ==========================
// üíå –ü—Ä–∏—ë–º VK access_token —á–µ—Ä–µ–∑ POST (–¥–ª—è –±—É–¥—É—â–µ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å —Ñ—Ä–æ–Ω—Ç–æ–º/–±–æ—Ç–æ–º)
// ==========================
app.post('/auth/vk/save', async (req, res) => {
  callCounter++;
  const now = Date.now();
  const ip = req.ip;

  console.log(`=== [VK TOKEN SAVE] –í–´–ó–û–í #${callCounter} ===`);
  console.log(`[TOKEN] –í—Ä–µ–º—è: ${new Date().toISOString()}`);
  console.log(`[TOKEN] IP: ${ip}`);
  console.log(`[TOKEN] –î–∞–Ω–Ω—ã–µ:`, req.body);

  // üëÆ –ó–∞—â–∏—Ç–∞ –æ—Ç —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ–¥–Ω–æ–≥–æ IP (anti-spam)
  if (recentIPs.has(ip) && now - recentIPs.get(ip) < 3000) {
    console.warn(`‚ö†Ô∏è –ü–æ–≤—Ç–æ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å IP ${ip} ‚Äî –±–ª–æ–∫–∏—Ä—É–µ–º`);
    return res.status(429).send('–°–ª–∏—à–∫–æ–º —á–∞—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã');
  }

  recentIPs.set(ip, now);
  setTimeout(() => recentIPs.delete(ip), 60000);

  try {
    const { access_token, user_id, email, tg_id } = req.body;

    if (!access_token || !user_id || !tg_id) {
      return res.status(400).json({ error: '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö' });
    }

    const usersPath = path.join(__dirname, 'users.json');
    let users = {};

    if (fs.existsSync(usersPath)) {
      const raw = fs.readFileSync(usersPath, 'utf-8');
      users = raw ? JSON.parse(raw) : {};
    }

    users[user_id] = {
      vk_user_id: user_id,
      access_token,
      email,
      tg_id
    };

    fs.writeFileSync(usersPath, JSON.stringify(users, null, 2));
    console.log(`üíæ –°–æ—Ö—Ä–∞–Ω—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å VK ${user_id} (TG ${tg_id})`);

    res.status(200).json({ success: true });
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è VK-—Ç–æ–∫–µ–Ω–∞:', error.message);
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

// ===================
// üìñ –°—Ç—Ä–∞–Ω–∏—Ü–∞ –ø–æ–º–æ—â–∏
// ===================
app.get('/help', (req, res) => {
  res.sendFile(path.join(__dirname, 'public', 'help.html'));
});

// =======================
// üì¶ –°—Ç–∞—Ç–∏–∫–∞ (frontend)
// =======================
app.use((req, res, next) => {
  console.log('[STATIC] –ó–∞–ø—Ä–æ—Å:', req.url);
  next();
});
app.use((req, res, next) => {
  if (req.url.startsWith('/auth')) return next();
  express.static('frontend')(req, res, next);
});
app.use((req, res, next) => {
  if (req.url.startsWith('/auth')) return next();
  express.static(path.join(__dirname, 'public'))(req, res, next);
});

// ================
// üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
// ================
app.listen(PORT, '0.0.0.0', () => {
  console.log(`ü™Ñ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT} ‚Äî –º–∞–≥–∏—è –Ω–∞—á–∞–ª–∞—Å—å!`);
});
