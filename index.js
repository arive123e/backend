const express = require('express');
const fs = require('fs');
const path = require('path');
const axios = require('axios');

const app = express();
const PORT = 3000;

// üîÑ NEW: –¥–ª—è POST-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–µ–Ω json-–ø–∞—Ä—Å–µ—Ä!
app.use(express.json());

app.get('/test', (req, res) => {
  res.send('Test OK! üö¶');
});

/*
  üîÑ NEW: —É–±–µ—Ä–∏ –∏–ª–∏ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π —Å—Ç–∞—Ä—ã–π GET-—ç–Ω–¥–ø–æ–∏–Ω—Ç –∫–æ–ª–±—ç–∫–∞!
  app.get('/auth/vk/callback', ... )
*/

// üîÑ NEW: –æ—Å–Ω–æ–≤–Ω–æ–π POST-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±–º–µ–Ω–∞ –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω
app.post('/auth/vk/callback', async (req, res) => {
  // üîÑ NEW: —Ç–µ–ø–µ—Ä—å –±–µ—Ä—ë–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ req.body, –∞ –Ω–µ req.query!
  const { code, state, code_verifier, device_id } = req.body;

  console.log('[VKID CALLBACK] POST:', { code, state, code_verifier, device_id });

  if (!code) return res.send('<h2>–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω code</h2>');
  if (!code_verifier) return res.send('<h2>–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω code_verifier</h2>');
  if (!device_id) return res.send('<h2>–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω device_id</h2>');

  const client_id = '53336238';
  // üîÑ NEW: redirect_uri –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ç–µ–º, —á—Ç–æ –≤ VK –∏ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ!
  const redirect_uri = 'https://api.fokusnikaltair.xyz/vk-callback.html';

  const params = new URLSearchParams();
  params.append('client_id', client_id);
  params.append('grant_type', 'authorization_code');
  params.append('code', code);
  params.append('redirect_uri', redirect_uri);
  params.append('code_verifier', code_verifier);
  params.append('device_id', device_id);

  try {
  const vkRes = await axios.post(
    'https://id.vk.com/oauth2/token',
    params.toString(),
    { headers: { 'Content-Type': 'application/x-www-form-urlencoded' } }
  );

  console.log('[VKID CALLBACK] –û—Ç–≤–µ—Ç VK:', vkRes.data);

  const data = vkRes.data;
  const usersPath = path.join(__dirname, 'users.json');
  let users = {};
  if (fs.existsSync(usersPath)) {
    const raw = fs.readFileSync(usersPath, 'utf-8');
    users = raw ? JSON.parse(raw) : {};
  }

  // ‚ö°Ô∏è NEW: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ access_token –∏ user_id
  if (data.access_token && data.user_id) {
    // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ —Å —ç—Ç–∏–º –∂–µ tg_id (–µ—Å–ª–∏ –±—ã–ª–∏)
for (const key of Object.keys(users)) {
  if (users[key].tg_id && String(users[key].tg_id) === String(state || null)) {
    delete users[key];
  }
}
    users[data.user_id] = {
      vk_user_id: data.user_id,
      access_token: data.access_token,
      refresh_token: data.refresh_token,
      expires_in: data.expires_in,
      tg_id: state || null,
      saved_at: new Date().toISOString(),
      status: 'ok'
    };
    fs.writeFileSync(usersPath, JSON.stringify(users, null, 2));
    res.sendFile(path.join(__dirname, 'public/success.html'));
    console.log(`üíæ VK user_id ${data.user_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω (TG: ${state || '-'})`);
  } else {
    // –ï—Å–ª–∏ access_token –Ω–µ—Ç ‚Äî —ç—Ç–æ –æ—à–∏–±–∫–∞!
    let failKey = (data.user_id || data.id || `fail_${Date.now()}`);
    users[failKey] = {
      error: data.error || data,
      tg_id: state || null,
      saved_at: new Date().toISOString(),
      status: 'fail'
    };
    fs.writeFileSync(usersPath, JSON.stringify(users, null, 2));
    res.sendFile(path.join(__dirname, 'public/error.html'));
    console.error('[VKID CALLBACK] –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞, –∞ –µ—Å—Ç—å:', data);
  }
} catch (err) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞ –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω:', err.response?.data || err.message);
  res.send('<h2>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–º–µ–Ω–µ –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω VK<br>' + JSON.stringify(err.response?.data || err.message) + '</h2>');
}
});

// üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ tg_id
app.get('/users/check', (req, res) => {
  const tg_id = req.query.tg_id;
  if (!tg_id) {
    return res.status(400).json({ success: false, error: '–ù–µ—Ç tg_id' });
  }

  const usersPath = path.join(__dirname, 'users.json');
  if (!fs.existsSync(usersPath)) {
    return res.json({ success: false });
  }

  const raw = fs.readFileSync(usersPath, 'utf-8');
  let users = {};
  try {
    users = raw ? JSON.parse(raw) : {};
  } catch (e) {
    return res.json({ success: false });
  }

  // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ tg_id
  const found = Object.values(users).find(user => String(user.tg_id) === String(tg_id) && user.status === 'ok');

  if (found) {
    return res.json({ success: true });
  } else {
    return res.json({ success: false });
  }
});

async function ensureFreshAccessToken(user, users, usersPath) {
  const now = Date.now();
  const savedAt = new Date(user.saved_at).getTime();
  const expiresIn = Number(user.expires_in || 0) * 1000;

  if (now - savedAt > expiresIn - 60000) {
    const params = new URLSearchParams();
    params.append('grant_type', 'refresh_token');
    params.append('client_id', '53336238');
    params.append('refresh_token', user.refresh_token);

    try {
      const resp = await axios.post('https://id.vk.com/oauth2/token', params, {
        headers: { 'Content-Type': 'application/x-www-form-urlencoded' }
      });

      if (resp.data.access_token && resp.data.refresh_token) {
        user.access_token = resp.data.access_token;
        user.refresh_token = resp.data.refresh_token;
        user.expires_in = resp.data.expires_in;
        user.saved_at = new Date().toISOString();
        users[user.vk_user_id] = user;
        fs.writeFileSync(usersPath, JSON.stringify(users, null, 2));
        console.log(`[VKID] ‚úÖ –¢–æ–∫–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${user.vk_user_id} –æ–±–Ω–æ–≤–ª—ë–Ω!`);
      } else {
        // –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω ‚Äî —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –∫–ª—é—á–∏
        delete user.access_token;
        delete user.refresh_token;
        user.status = 'fail';
        users[user.vk_user_id] = user;
        fs.writeFileSync(usersPath, JSON.stringify(users, null, 2));
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω VK, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
      }
    } catch (e) {
      // –¢–æ–∂–µ —Å–±—Ä–∞—Å—ã–≤–∞–µ–º
      delete user.access_token;
      delete user.refresh_token;
      user.status = 'fail';
      users[user.vk_user_id] = user;
      fs.writeFileSync(usersPath, JSON.stringify(users, null, 2));
      throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: ' + (e.response?.data?.error_description || e.message));
    }
  }
  return user;
}


app.get('/users/groups', async (req, res) => {
  const tg_id = req.query.tg_id;
  if (!tg_id) {
    return res.status(400).json({ success: false, error: '–ù–µ—Ç tg_id' });
  }

  const usersPath = path.join(__dirname, 'users.json');
  if (!fs.existsSync(usersPath)) {
    return res.json({ success: false, error: '–ù–µ—Ç users.json' });
  }

  const raw = fs.readFileSync(usersPath, 'utf-8');
  let users = {};
  try {
    users = raw ? JSON.parse(raw) : {};
  } catch (e) {
    return res.json({ success: false, error: '–û—à–∏–±–∫–∞ users.json' });
  }

  const user = Object.values(users).find(
    u => String(u.tg_id) === String(tg_id) && u.status === 'ok'
  );

  if (!user || !user.access_token) {
    return res.json({ success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞' });
  }

  // --- NEW: –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –Ω–∞–¥–æ ---
  try {
    await ensureFreshAccessToken(user, users, usersPath);
  } catch (e) {
    return res.json({
      success: false,
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –ø–æ—Ä—Ç–∞–ª.',
      reauth: true
    });
  }

  try {
    const vkResp = await axios.get('https://api.vk.com/method/groups.get', {
      params: {
        access_token: user.access_token,
        extended: 1,
        v: '5.131'
      }
    });
    if (vkResp.data.error) {
      return res.json({ success: false, error: vkResp.data.error.error_msg });
    }
    return res.json({ success: true, groups: vkResp.data.response.items });
  } catch (err) {
    return res.json({ success: false, error: err.message });
  }
});


// –†–∞–∑–¥–∞—á–∞ —Å—Ç–∞—Ç–∏–∫–∏ (frontend/public) –∫–∞–∫ –∏ —Ä–∞–Ω—å—à–µ ‚Äî —ç—Ç–æ –ø—Ä–∞–≤–∏–ª—å–Ω–æ!
app.use(express.static(path.join(__dirname, 'frontend')));
app.use(express.static(path.join(__dirname, 'public')));

app.listen(PORT, () => {
  console.log(`VK ID Auth backend –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});
