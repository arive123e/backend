const express = require('express');
const fs = require('fs');
const path = require('path');
const axios = require('axios');

require('dotenv').config(); // —Ç–µ–ø–µ—Ä—å .env –¥–ª—è –±–µ–∫–µ–Ω–¥–∞!

const app = express();
const PORT = 3000;

// --- [1] –õ–æ–∫ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π --- //
const refreshingUsers = {};

// --- [2] –§—É–Ω–∫—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫ --- //
function logError(message) {
  const time = new Date().toISOString();
  fs.appendFileSync(path.join(__dirname, 'errors.log'), `[${time}] - ${message}\n`);
}

// --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤ Telegram
async function notifyUser(tg_id, vkAuthUrl) {
  const telegramBotToken = process.env.TELEGRAM_BOT_TOKEN;
  const msg = '–ú–∞–≥–∏—á–µ—Å–∫–∞—è —Å–∏–ª–∞ –∏—Å—Ç–æ—â–∏–ª–∞—Å—å, –Ω—É–∂–Ω–∞ –Ω–æ–≤–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è! –ñ–º–∏ —Å—é–¥–∞ ‚¨áÔ∏è';
  try {
    await axios.post(`https://api.telegram.org/bot${telegramBotToken}/sendMessage`, {
      chat_id: tg_id,
      text: msg,
      reply_markup: {
        inline_keyboard: [[
          { text: '–°–æ—Ç–≤–æ—Ä–∏—Ç—å –∑–∞–∫–ª–∏–Ω–∞–Ω–∏–µ –ø–µ—Ä–µ—Ö–æ–¥–∞ üåÄ', url: vkAuthUrl }
        ]]
      }
    });
  } catch (e) {
    logError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram: ' + (e.response?.data || e.message));
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram:', e.response?.data || e.message);
  }
}

app.use(express.json());

// --- –æ—Å–Ω–æ–≤–Ω–æ–π POST-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±–º–µ–Ω–∞ –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω
app.post('/auth/vk/callback', async (req, res) => {
  const { code, state, code_verifier, device_id } = req.body;

  console.log('[VKID CALLBACK] POST:', { code, state, code_verifier, device_id });

  if (!code) return res.send('<h2>–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω code</h2>');
  if (!code_verifier) return res.send('<h2>–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω code_verifier</h2>');
  if (!device_id) return res.send('<h2>–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω device_id</h2>');

  const client_id = '53336238';
  const redirect_uri = 'https://api.fokusnikaltair.xyz/vk-callback.html';

  const params = new URLSearchParams();
  params.append('client_id', client_id);
  params.append('grant_type', 'authorization_code');
  params.append('code', code);
  params.append('redirect_uri', redirect_uri);
  params.append('code_verifier', code_verifier);
  params.append('device_id', device_id);

  try {
    const vkRes = await axios.post(
      'https://id.vk.com/oauth2/auth',
      params.toString(),
      { headers: { 'Content-Type': 'application/x-www-form-urlencoded' } }
    );

    console.log('[VKID CALLBACK] –û—Ç–≤–µ—Ç VK:', vkRes.data);

    const data = vkRes.data;
    const usersPath = path.join(__dirname, 'users.json');
    let users = {};
    if (fs.existsSync(usersPath)) {
      const raw = fs.readFileSync(usersPath, 'utf-8');
      users = raw ? JSON.parse(raw) : {};
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ access_token –∏ user_id
    if (data.access_token && data.user_id) {
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ —Å —ç—Ç–∏–º –∂–µ tg_id (–µ—Å–ª–∏ –±—ã–ª–∏)
      for (const key of Object.keys(users)) {
        if (users[key].tg_id && String(users[key].tg_id) === String(state || null)) {
          delete users[key];
        }
      }
      users[data.user_id] = {
        vk_user_id: data.user_id,
        access_token: data.access_token,
        refresh_token: data.refresh_token,
        expires_in: data.expires_in,
        tg_id: state || null,
        saved_at: new Date().toISOString(),
        status: 'ok',
        device_id: device_id
      };
      // --- [3] –ë—ç–∫–∞–ø –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é
      try {
        fs.copyFileSync(usersPath, usersPath + '.bak');
      } catch (e) {
        logError('[backup] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –±—ç–∫–∞–ø users.json: ' + e.message);
      }
      console.log('[–ü–†–û–í–ï–†–ö–ê] users.json –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é:', JSON.stringify(users, null, 2));
      fs.writeFileSync(usersPath, JSON.stringify(users, null, 2));
      console.log('[–ü–†–û–í–ï–†–ö–ê] users.json –∑–∞–ø–∏—Å–∞–Ω!');

      res.sendFile(path.join(__dirname, 'public/success.html'));
      console.log(`üíæ VK user_id ${data.user_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω (TG: ${state || '-'})`);
    } else {
      // –ï—Å–ª–∏ access_token –Ω–µ—Ç ‚Äî —ç—Ç–æ –æ—à–∏–±–∫–∞!
      let failKey = (data.user_id || data.id || `fail_${Date.now()}`);
      users[failKey] = {
        error: data.error || data,
        tg_id: state || null,
        saved_at: new Date().toISOString(),
        status: 'fail'
      };
      try {
        fs.copyFileSync(usersPath, usersPath + '.bak');
      } catch (e) {
        logError('[backup] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –±—ç–∫–∞–ø users.json: ' + e.message);
      }
      console.log('[–ü–†–û–í–ï–†–ö–ê] users.json –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é:', JSON.stringify(users, null, 2));
      fs.writeFileSync(usersPath, JSON.stringify(users, null, 2));
      console.log('[–ü–†–û–í–ï–†–ö–ê] users.json –∑–∞–ø–∏—Å–∞–Ω!');

      res.sendFile(path.join(__dirname, 'public/error.html'));
      console.error('[VKID CALLBACK] –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞, –∞ –µ—Å—Ç—å:', data);
    }
  } catch (err) {
    logError('‚ùå –û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞ –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω: ' + (err.response?.data || err.message));
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞ –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω:', err.response?.data || err.message);
    res.send('<h2>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–º–µ–Ω–µ –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω VK<br>' + JSON.stringify(err.response?.data || err.message) + '</h2>');
  }
});

// –ü—Ä–æ–≤–µ—Ä–∫–∞ ‚Äî –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ tg_id
app.get('/users/check', (req, res) => {
  const tg_id = req.query.tg_id;
  if (!tg_id) {
    return res.status(400).json({ success: false, error: '–ù–µ—Ç tg_id' });
  }

  const usersPath = path.join(__dirname, 'users.json');
  if (!fs.existsSync(usersPath)) {
    return res.json({ success: false });
  }

  const raw = fs.readFileSync(usersPath, 'utf-8');
  let users = {};
  try {
    users = raw ? JSON.parse(raw) : {};
  } catch (e) {
    logError('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è users.json: ' + e.message);
    return res.json({ success: false });
  }

  // –ò—â–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ tg_id
  const found = Object.values(users).find(user => String(user.tg_id) === String(tg_id) && user.status === 'ok');

  if (found) {
    return res.json({ success: true });
  } else {
    return res.json({ success: false });
  }
});

// --- –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ --- //
async function ensureFreshAccessToken(user, users, usersPath) {
  if (refreshingUsers[user.vk_user_id]) {
    console.log(`[ensureFreshAccessToken] –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —É–∂–µ –∏–¥—ë—Ç –¥–ª—è user_id=${user.vk_user_id} - –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
    return user;
  }
  refreshingUsers[user.vk_user_id] = true;

  const now = Date.now();
  const savedAt = new Date(user.saved_at).getTime();
  const expiresIn = Number(user.expires_in || 0) * 1000;

  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Ä–∞ –ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω (–¥–æ –∏—Å—Ç–µ—á–µ–Ω–∏—è < 1 –º–∏–Ω—É—Ç—ã)
    if (now - savedAt > expiresIn - 60000) {
      const params = new URLSearchParams();
      params.append('grant_type', 'refresh_token');
      params.append('client_id', '53336238');
      params.append('refresh_token', user.refresh_token);
      params.append('device_id', user.device_id);

      try {
        console.log(`[ensureFreshAccessToken] –ó–∞–ø—Ä–æ—Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è user_id=${user.vk_user_id}`);
        const resp = await axios.post('https://id.vk.com/oauth2/auth', params, {
          headers: { 'Content-Type': 'application/x-www-form-urlencoded' }
        });

        console.log('[ensureFreshAccessToken] VK –æ—Ç–≤–µ—Ç (raw):', JSON.stringify(resp.data, null, 2));

        // –¢–æ–ª—å–∫–æ –µ—Å–ª–∏ VK —Ä–µ–∞–ª—å–Ω–æ –≤–µ—Ä–Ω—É–ª –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω - –æ–±–Ω–æ–≤–ª—è–µ–º!
        if (resp.data.access_token && resp.data.refresh_token) {
          user.access_token = resp.data.access_token;
          user.refresh_token = resp.data.refresh_token;
          user.expires_in = resp.data.expires_in;
          user.saved_at = new Date().toISOString();
          user.status = 'ok';
          users[user.vk_user_id] = user;
          try {
            fs.copyFileSync(usersPath, usersPath + '.bak');
          } catch (e) {
            logError('[backup] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –±—ç–∫–∞–ø users.json: ' + e.message);
          }
          console.log('[–ü–†–û–í–ï–†–ö–ê] users.json –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é:', JSON.stringify(users, null, 2));
          fs.writeFileSync(usersPath, JSON.stringify(users, null, 2));
          console.log('[–ü–†–û–í–ï–†–ö–ê] users.json –∑–∞–ø–∏—Å–∞–Ω!');
          console.log(`[ensureFreshAccessToken] ‚úÖ –¢–æ–∫–µ–Ω —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è user_id=${user.vk_user_id}`);
        } else {
          // –ù–µ —Ç—Ä–æ–≥–∞–µ–º —Å—Ç–∞—Ä—ã–π —Ç–æ–∫–µ–Ω, –ø—Ä–æ—Å—Ç–æ –º–µ–Ω—è–µ–º —Å—Ç–∞—Ç—É—Å
          logError(`[ensureFreshAccessToken] VK –Ω–µ –≤–µ—Ä–Ω—É–ª –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω! –û—Ç–≤–µ—Ç: ${JSON.stringify(resp.data)}`);
          console.error(`[ensureFreshAccessToken] ‚ùóÔ∏è VK –ù–ï –≤–µ—Ä–Ω—É–ª –Ω–æ–≤—ã–π —Ç–æ–∫–µ–Ω! –û—Ç–≤–µ—Ç:`, resp.data);
          user.status = 'fail';
          users[user.vk_user_id] = user;
          try {
            fs.copyFileSync(usersPath, usersPath + '.bak');
          } catch (e) {
            logError('[backup] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –±—ç–∫–∞–ø users.json: ' + e.message);
          }
          fs.writeFileSync(usersPath, JSON.stringify(users, null, 2));
          throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω VK, —Ç—Ä–µ–±—É–µ—Ç—Å—è –ø–æ–≤—Ç–æ—Ä–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
        }
      } catch (e) {
        logError(`[ensureFreshAccessToken] –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ VK: ${e.response?.data || e.message}`);
        user.status = 'fail';
        users[user.vk_user_id] = user;
        try {
          fs.copyFileSync(usersPath, usersPath + '.bak');
        } catch (e) {
          logError('[backup] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –±—ç–∫–∞–ø users.json: ' + e.message);
        }
        fs.writeFileSync(usersPath, JSON.stringify(users, null, 2));
        throw new Error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Ç–æ–∫–µ–Ω–∞: ' + (e.response?.data?.error_description || e.message));
      }
    }
    return user;
  } finally {
    refreshingUsers[user.vk_user_id] = false;
  }
}



app.get('/users/groups', async (req, res) => {
  const tg_id = req.query.tg_id;
  if (!tg_id) {
    return res.status(400).json({ success: false, error: '–ù–µ—Ç tg_id' });
  }

  const usersPath = path.join(__dirname, 'users.json');
  if (!fs.existsSync(usersPath)) {
    return res.json({ success: false, error: '–ù–µ—Ç users.json' });
  }

  const raw = fs.readFileSync(usersPath, 'utf-8');
  let users = {};
  try {
    users = raw ? JSON.parse(raw) : {};
  } catch (e) {
    logError('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è users.json: ' + e.message);
    return res.json({ success: false, error: '–û—à–∏–±–∫–∞ users.json' });
  }

  const user = Object.values(users).find(
    u => String(u.tg_id) === String(tg_id) && u.status === 'ok'
  );

  if (!user || !user.access_token) {
    return res.json({ success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ—Ç —Ç–æ–∫–µ–Ω–∞' });
  }

  // --- NEW: –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–∫–µ–Ω –µ—Å–ª–∏ –Ω–∞–¥–æ ---
  try {
    await ensureFreshAccessToken(user, users, usersPath);
  } catch (e) {
    return res.json({
      success: false,
      error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Ç–æ–∫–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –∑–∞–Ω–æ–≤–æ —á–µ—Ä–µ–∑ –ø–æ—Ä—Ç–∞–ª.',
      reauth: true
    });
  }

  try {
    // ======= –õ–û–ì –ó–ê–ü–†–û–°–ê VK =======
    console.log('VK groups.get params:', {
      access_token: user.access_token ? user.access_token.slice(0, 10) + '... (—Å–∫—Ä—ã—Ç–æ)' : undefined,
      extended: 1,
      v: '5.131',
      count: 1000
    });

    const vkResp = await axios.get('https://api.vk.com/method/groups.get', {
      params: {
        access_token: user.access_token,
        extended: 1,
        v: '5.131',
        count: 1000
      }
    });

    // ======= –õ–û–ì –û–¢–í–ï–¢–ê VK =======
    console.log('VK –æ—Ç–≤–µ—Ç:', JSON.stringify(vkResp.data, null, 2));

    if (vkResp.data.error) {
      return res.json({ success: false, error: vkResp.data.error.error_msg });
    }
    return res.json({ success: true, groups: vkResp.data.response.items });
  } catch (err) {
    logError('–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –≥—Ä—É–ø–ø VK: ' + (err.response?.data ? JSON.stringify(err.response.data) : err.message));
    return res.json({ success: false, error: err.message });
  }
});


// --- –§–æ–Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç --- //
async function refreshAllTokens() {
  const usersPath = path.join(__dirname, 'users.json');
  if (!fs.existsSync(usersPath)) {
    console.log('[refreshAllTokens] –ù–µ—Ç —Ñ–∞–π–ª–∞ users.json');
    return;
  }
  let users = {};
  let updated = false;
  try {
    const raw = fs.readFileSync(usersPath, 'utf-8');
    users = raw ? JSON.parse(raw) : {};
  } catch (e) {
    logError('[refreshAllTokens] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è users.json: ' + e.message);
    console.error('[refreshAllTokens] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è users.json:', e.message);
    return;
  }

  for (const uid in users) {
    const user = users[uid];
    if (user.status === 'ok' && user.refresh_token && user.tg_id) {
      const oldAccessToken = user.access_token;
      const oldRefreshToken = user.refresh_token;
      const oldStatus = user.status;
      try {
        await ensureFreshAccessToken(user, users, usersPath);
        if (
          user.access_token !== oldAccessToken ||
          user.refresh_token !== oldRefreshToken ||
          user.status !== oldStatus
        ) {
          updated = true;
          console.log(`[refreshAllTokens] ‚úÖ –¢–æ–∫–µ–Ω –∏–ª–∏ —Å—Ç–∞—Ç—É—Å –æ–±–Ω–æ–≤–ª—ë–Ω –¥–ª—è user_id=${user.vk_user_id}`);
        }
      } catch (err) {
        logError(`[refreshAllTokens] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è user_id=${user.vk_user_id}: ${err.message}`);
        console.error(`[refreshAllTokens] ‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–æ–∫–µ–Ω–∞ –¥–ª—è user_id=${user.vk_user_id}:`, err.message);
        const vkAuthUrl = `https://fokusnikaltair.xyz/vkid-auth.html?tg_id=${user.tg_id}`;
        await notifyUser(user.tg_id, vkAuthUrl);
        console.log(`[refreshAllTokens] ‚ö°Ô∏è –û–ø–æ–≤–µ—Å—Ç–∏–ª–∏ ${user.tg_id} –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –Ω–æ–≤–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏`);
        updated = true;
      }
    }
  }
  if (updated) {
    try {
      fs.copyFileSync(usersPath, usersPath + '.bak');
    } catch (e) {
      logError('[backup] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –±—ç–∫–∞–ø users.json: ' + e.message);
    }
    console.log('[–ü–†–û–í–ï–†–ö–ê] users.json –ø–µ—Ä–µ–¥ –∑–∞–ø–∏—Å—å—é:', JSON.stringify(users, null, 2));
    fs.writeFileSync(usersPath, JSON.stringify(users, null, 2));
    console.log('[–ü–†–û–í–ï–†–ö–ê] users.json –∑–∞–ø–∏—Å–∞–Ω!');
    console.log(`[refreshAllTokens] –§–∞–π–ª users.json –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω!`);
  }
}

// –ó–∞–ø—É—Å–∫–∞—Ç—å —Ä–∞–∑ –≤ 5 –º–∏–Ω—É—Ç
setInterval(refreshAllTokens, 5 * 60 * 1000);

// --- [5] –ñ—ë—Å—Ç–∫–æ–µ —É–¥–∞–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ user_id --- //
app.post('/users/delete', (req, res) => {
  const { user_id } = req.body;
  if (!user_id) {
    return res.status(400).json({ success: false, error: '–ù–µ –ø–µ—Ä–µ–¥–∞–Ω user_id' });
  }
  const usersPath = path.join(__dirname, 'users.json');
  if (!fs.existsSync(usersPath)) {
    return res.status(400).json({ success: false, error: '–ù–µ—Ç —Ñ–∞–π–ª–∞ users.json' });
  }
  let users = {};
  try {
    const raw = fs.readFileSync(usersPath, 'utf-8');
    users = raw ? JSON.parse(raw) : {};
  } catch (e) {
    logError('[deleteUser] –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ users.json: ' + e.message);
    return res.status(500).json({ success: false, error: '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞ users.json' });
  }
  if (users[user_id]) {
    delete users[user_id];
    try {
      fs.copyFileSync(usersPath, usersPath + '.bak');
    } catch (e) {
      logError('[backup] –ù–µ —É–¥–∞–ª–æ—Å—å —Å–¥–µ–ª–∞—Ç—å –±—ç–∫–∞–ø –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ' + e.message);
    }
    fs.writeFileSync(usersPath, JSON.stringify(users, null, 2));
    return res.json({ success: true });
  } else {
    return res.status(404).json({ success: false, error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
  }
});

app.use(express.static(path.join(__dirname, 'frontend')));
app.use(express.static(path.join(__dirname, 'public')));

app.listen(PORT, () => {
  console.log(`VK ID Auth backend –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});
