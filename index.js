const express = require('express');
const fs = require('fs');
const path = require('path');
const axios = require('axios');

const app = express();
const PORT = 3000;

// üîÑ NEW: –¥–ª—è POST-–∑–∞–ø—Ä–æ—Å–æ–≤ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–µ–Ω json-–ø–∞—Ä—Å–µ—Ä!
app.use(express.json());

app.get('/test', (req, res) => {
  res.send('Test OK! üö¶');
});

/*
  üîÑ NEW: —É–±–µ—Ä–∏ –∏–ª–∏ –∑–∞–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π —Å—Ç–∞—Ä—ã–π GET-—ç–Ω–¥–ø–æ–∏–Ω—Ç –∫–æ–ª–±—ç–∫–∞!
  app.get('/auth/vk/callback', ... )
*/

// üîÑ NEW: –æ—Å–Ω–æ–≤–Ω–æ–π POST-—ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –æ–±–º–µ–Ω–∞ –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω
app.post('/auth/vk/callback', async (req, res) => {
  // üîÑ NEW: —Ç–µ–ø–µ—Ä—å –±–µ—Ä—ë–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ req.body, –∞ –Ω–µ req.query!
  const { code, state, code_verifier, device_id } = req.body;

  console.log('[VKID CALLBACK] POST:', { code, state, code_verifier, device_id });

  if (!code) return res.send('<h2>–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω code</h2>');
  if (!code_verifier) return res.send('<h2>–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω code_verifier</h2>');
  if (!device_id) return res.send('<h2>–û—à–∏–±–∫–∞: –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω device_id</h2>');

  const client_id = '53336238';
  // üîÑ NEW: redirect_uri –¥–æ–ª–∂–µ–Ω —Å–æ–≤–ø–∞–¥–∞—Ç—å —Å —Ç–µ–º, —á—Ç–æ –≤ VK –∏ –Ω–∞ —Ñ—Ä–æ–Ω—Ç–µ!
  const redirect_uri = 'https://api.fokusnikaltair.xyz/vk-callback.html';

  const params = new URLSearchParams();
  params.append('client_id', client_id);
  params.append('grant_type', 'authorization_code');
  params.append('code', code);
  params.append('redirect_uri', redirect_uri);
  params.append('code_verifier', code_verifier);
  params.append('device_id', device_id);

  try {
  const vkRes = await axios.post(
    'https://id.vk.com/oauth2/auth',
    params.toString(),
    { headers: { 'Content-Type': 'application/x-www-form-urlencoded' } }
  );

  console.log('[VKID CALLBACK] –û—Ç–≤–µ—Ç VK:', vkRes.data);

  const data = vkRes.data;
  const usersPath = path.join(__dirname, 'users.json');
  let users = {};
  if (fs.existsSync(usersPath)) {
    const raw = fs.readFileSync(usersPath, 'utf-8');
    users = raw ? JSON.parse(raw) : {};
  }

  // ‚ö°Ô∏è NEW: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ access_token –∏ user_id
  if (data.access_token && data.user_id) {
    users[data.user_id] = {
      vk_user_id: data.user_id,
      access_token: data.access_token,
      refresh_token: data.refresh_token,
      expires_in: data.expires_in,
      tg_id: state || null,
      saved_at: new Date().toISOString(),
      status: 'ok'
    };
    fs.writeFileSync(usersPath, JSON.stringify(users, null, 2));
    res.send('<h2><b>–£—Å–ø–µ—à–Ω–æ!</b> –ú–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ Telegram.</h2>');
    console.log(`üíæ VK user_id ${data.user_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω (TG: ${state || '-'})`);
  } else {
    // –ï—Å–ª–∏ access_token –Ω–µ—Ç ‚Äî —ç—Ç–æ –æ—à–∏–±–∫–∞!
    let failKey = (data.user_id || data.id || `fail_${Date.now()}`);
    users[failKey] = {
      error: data.error || data,
      tg_id: state || null,
      saved_at: new Date().toISOString(),
      status: 'fail'
    };
    fs.writeFileSync(usersPath, JSON.stringify(users, null, 2));
    res.send('<h2>–û—à–∏–±–∫–∞ –æ—Ç VK:<br>' + JSON.stringify(data.error || data) + '</h2>');
    console.error('[VKID CALLBACK] –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞, –∞ –µ—Å—Ç—å:', data);
  }
} catch (err) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞ –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω:', err.response?.data || err.message);
  res.send('<h2>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–º–µ–Ω–µ –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω VK<br>' + JSON.stringify(err.response?.data || err.message) + '</h2>');
}
});

// –†–∞–∑–¥–∞—á–∞ —Å—Ç–∞—Ç–∏–∫–∏ –∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
['public'].forEach(dir => {
  const staticPath = path.join(__dirname, dir);
  if (fs.existsSync(staticPath)) {
    app.use(express.static(staticPath));
  } else {
    console.warn(`Static directory not found: ${staticPath}`);
  }
});

app.listen(PORT, () => {
  console.log(`VK ID Auth backend –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});
