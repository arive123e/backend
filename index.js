// index.js ‚Äî VK ID OAuth 2.1 PKCE backend-only (–∏—é–Ω—å 2025) —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π PKCE

const express = require('express');
const fs = require('fs');
const path = require('path');
const axios = require('axios');
const crypto = require('crypto'); // ‚¨ÖÔ∏è –î–æ–±–∞–≤–ª–µ–Ω–æ –¥–ª—è PKCE

const app = express();
const PORT = 3000;

// –î–ª—è —á—Ç–µ–Ω–∏—è JSON POST-–∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–∞ –±—É–¥—É—â–µ–µ)
app.use(express.json());

// 1. –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö PKCE –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
// (–í production –∂–µ–ª–∞—Ç–µ–ª—å–Ω–æ —Ö—Ä–∞–Ω–∏—Ç—å –≤ –ë–î –∏–ª–∏ Redis, –∑–¥–µ—Å—å ‚Äî –≤ —Ñ–∞–π–ª–µ –¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
const pkcePath = path.join(__dirname, 'pkce.json');
function savePKCE(state, code_verifier) {
  let pkce = {};
  if (fs.existsSync(pkcePath)) {
    const raw = fs.readFileSync(pkcePath, 'utf-8');
    pkce = raw ? JSON.parse(raw) : {};
  }
  pkce[state] = { code_verifier, created_at: Date.now() };
  fs.writeFileSync(pkcePath, JSON.stringify(pkce, null, 2));
}
function popPKCE(state) {
  if (!fs.existsSync(pkcePath)) return null;
  const raw = fs.readFileSync(pkcePath, 'utf-8');
  let pkce = raw ? JSON.parse(raw) : {};
  const record = pkce[state];
  delete pkce[state];
  fs.writeFileSync(pkcePath, JSON.stringify(pkce, null, 2));
  return record?.code_verifier || null;
}

// –¢–µ—Å—Ç–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç
app.get('/test', (req, res) => {
  res.send('Test OK! üö¶');
});


// --------------------
// 2. –ù–æ–≤—ã–π endpoint: –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PKCE –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –≤—ã–¥–∞—á–∞ URL –¥–ª—è VK –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
//    (–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤–º–µ—Å—Ç–æ "–∂—ë—Å—Ç–∫–æ–π" —Å—Å—ã–ª–∫–∏ –Ω–∞ VK OAuth –≤ —Ñ—Ä–æ–Ω—Ç–µ)
app.get('/auth/vk/link', (req, res) => {
  const client_id = '53336238';
  const redirect_uri = 'https://api.fokusnikaltair.xyz/auth/vk/callback';
  const tg_id = req.query.tg_id;
  if (!tg_id) return res.status(400).send('–ù–µ—Ç tg_id');

  // === [PKCE] –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º code_verifier –∏ code_challenge ===
  const code_verifier = crypto.randomBytes(64).toString('base64url').slice(0, 128);
  const code_challenge = crypto.createHash('sha256')
    .update(code_verifier)
    .digest('base64')
    .replace(/\+/g, '-').replace(/\//g, '_').replace(/=+$/, '');

  // –°–æ—Ö—Ä–∞–Ω—è–µ–º code_verifier –ø–æ state (tg_id)
  savePKCE(tg_id, code_verifier);

  // –°–æ–±–∏—Ä–∞–µ–º —Å—Å—ã–ª–∫—É –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ VK
  const auth_url = `https://id.vk.com/auth?client_id=${client_id}&redirect_uri=${encodeURIComponent(redirect_uri)}&response_type=code&scope=groups,offline&v=5.199&state=${tg_id}&code_challenge=${code_challenge}&code_challenge_method=S256`;

  res.json({ auth_url }); // —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –º–æ–∂–µ—Ç —Ä–µ–¥–∏—Ä–µ–∫—Ç–∏—Ç—å –ø–æ —ç—Ç–æ–º—É –∞–¥—Ä–µ—Å—É
});
// --------------------


// –ì–ª–∞–≤–Ω—ã–π VK ID CALLBACK ‚Äî —Ç—É—Ç –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç –æ–±–º–µ–Ω –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è!
app.get('/auth/vk/callback', async (req, res) => {
  const { code, state } = req.query;

  if (!code) {
    return res.send('<h2>–û—à–∏–±–∫–∞: –ø–∞—Ä–∞–º–µ—Ç—Ä code –Ω–µ –Ω–∞–π–¥–µ–Ω</h2>');
  }

  // –î–∞–Ω–Ω—ã–µ —Ç–≤–æ–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è VK
  const client_id = '53336238';
  const redirect_uri = 'https://api.fokusnikaltair.xyz/auth/vk/callback';

  // === [PKCE] –î–æ—Å—Ç–∞—ë–º code_verifier –ø–æ state (tg_id) ===
  const code_verifier = popPKCE(state);
  if (!code_verifier) {
    return res.send('<h2>–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω code_verifier –¥–ª—è —ç—Ç–æ–≥–æ state (tg_id). –í–æ–∑–º–æ–∂–Ω–æ, —Å—Ä–æ–∫ –¥–µ–π—Å—Ç–≤–∏—è –∏—Å—Ç—ë–∫ –∏–ª–∏ —Å—Å—ã–ª–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –¥–≤–∞–∂–¥—ã.</h2>');
  }

  // –°–æ–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è VK OAuth2.1 PKCE
  const postParams = new URLSearchParams();
  postParams.append('grant_type', 'authorization_code');
  postParams.append('client_id', client_id);
  postParams.append('redirect_uri', redirect_uri);
  postParams.append('code', code);
  postParams.append('code_verifier', code_verifier); // ‚¨ÖÔ∏è –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–π –¥–ª—è PKCE!
  postParams.append('v', '5.199');

  try {
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ VK
    const vkRes = await axios.post(
      'https://id.vk.com/oauth2/token',
      postParams.toString(),
      { headers: { 'Content-Type': 'application/x-www-form-urlencoded' } }
    );
    const data = vkRes.data;

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const usersPath = path.join(__dirname, 'users.json');
    let users = {};
    if (fs.existsSync(usersPath)) {
      const raw = fs.readFileSync(usersPath, 'utf-8');
      users = raw ? JSON.parse(raw) : {};
    }
    users[data.user_id] = {
      vk_user_id: data.user_id,
      access_token: data.access_token,
      refresh_token: data.refresh_token,
      expires_in: data.expires_in,
      tg_id: state || null, // state = tg_id
      saved_at: new Date().toISOString()
    };
    fs.writeFileSync(usersPath, JSON.stringify(users, null, 2));

    res.send('<h2><b>–ó–∞–≤–µ—Ä—à–µ–Ω–æ!</b> –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –∏ –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ Telegram.</h2>');
    console.log(`üíæ VK user_id ${data.user_id} —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω—ë–Ω (TG: ${state || '-'})`);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–º–µ–Ω–∞ –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω:', err.response?.data || err.message);
    res.send('<h2>–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–º–µ–Ω–µ –∫–æ–¥–∞ –Ω–∞ —Ç–æ–∫–µ–Ω VK<br>' + JSON.stringify(err.response?.data || err.message) + '</h2>');
  }
});

// –†–∞–∑–¥–∞—ë–º —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥/–ø—É–±–ª–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã (index.html, —Å—Ç–∏–ª–∏ –∏ —Ç.–¥.)
app.use(express.static(path.join(__dirname, 'frontend')));
app.use(express.static(path.join(__dirname, 'public')));

// –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞
app.listen(PORT, '0.0.0.0', () => {
  console.log(`ü™Ñ –°–µ—Ä–≤–µ—Ä VK ID Auth –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});

/*
============================================
  üî•  –í–ê–ñ–ù–û–ï –ú–ï–°–¢–û —Å PKCE!
  1. –ì–µ–Ω–µ—Ä–∞—Ü–∏—è code_verifier/code_challenge –≤ /auth/vk/link
  2. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ code_verifier –ø–æ state (tg_id)
  3. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ code_verifier –ø—Ä–∏ –æ–±–º–µ–Ω–µ code –Ω–∞ —Ç–æ–∫–µ–Ω (–≤ /auth/vk/callback)
============================================
*/
